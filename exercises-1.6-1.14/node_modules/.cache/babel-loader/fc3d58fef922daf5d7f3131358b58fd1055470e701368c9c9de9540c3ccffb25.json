{"ast":null,"code":"var _jsxFileName = \"/Users/kendallhtucker1/dev/university of helskinki full stack class/full-stack-open/exercises-1.6/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Statistics = (good, bad, all) => {\n  if (all > 0) {\n    setAverage((good * 1 + bad * -1) / all);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"average \", average]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_c = Statistics;\nconst App = () => {\n  _s();\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [all, setAll] = useState(0);\n  const [average, setAverage] = useState(0);\n  const [positive, setPositive] = useState(0);\n  const handleGood = () => {\n    setGood(good + 1);\n    setAll(all + 1);\n  };\n  const handleNeutral = () => {\n    setNeutral(neutral + 1);\n    setAll(all + 1);\n  };\n  const handleBad = () => {\n    setBad(bad + 1);\n    setAll(all + 1);\n  };\n\n  /* const HandleAverage = () => {\n    if (all > 0) {\n      setAverage((good * 1 + bad * -1) / all)\n    }\n    return (\n      <div>\n        average {average}\n      </div>\n    )\n  } */\n\n  const HandlePositive = () => {\n    if (all > 0) {\n      setPositive(good / all);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"positive \", positive]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGood,\n      children: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNeutral,\n      children: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBad,\n      children: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"good \", good]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"neutral \", neutral]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"bad \", bad]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"all \", all]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      good: good,\n      bad: bad,\n      all: all\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HandlePositive, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"4gnNStmv2er021Bn8O2GURCE9pg=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Statistics\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useState","Statistics","good","bad","all","setAverage","average","App","setGood","neutral","setNeutral","setBad","setAll","positive","setPositive","handleGood","handleNeutral","handleBad","HandlePositive"],"sources":["/Users/kendallhtucker1/dev/university of helskinki full stack class/full-stack-open/exercises-1.6/src/App.js"],"sourcesContent":["import { useState } from 'react'\n\nconst Statistics = (good, bad, all) => {\n  if (all > 0) {\n    setAverage((good * 1 + bad * -1) / all)\n  }\n  return (\n    <div>\n      average {average}\n    </div>\n  )\n}\n\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  const [all, setAll] = useState(0)\n  const [average, setAverage] = useState(0)\n  const [positive, setPositive] = useState(0)\n\n\n  const handleGood = () => {\n    setGood(good + 1)\n    setAll(all + 1)\n  }\n\n  const handleNeutral = () => {\n    setNeutral(neutral + 1)\n    setAll(all + 1)\n  }\n\n  const handleBad = () => {\n    setBad(bad + 1)\n    setAll(all + 1)\n  }\n\n  /* const HandleAverage = () => {\n    if (all > 0) {\n      setAverage((good * 1 + bad * -1) / all)\n    }\n    return (\n      <div>\n        average {average}\n      </div>\n    )\n  } */\n\n  const HandlePositive = () => {\n    if (all > 0) {\n      setPositive(good / (all))\n    }\n    return (\n      <div>\n        positive {positive}\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <h1>give feedback</h1>\n      <button onClick={handleGood}>good</button>\n      <button onClick={handleNeutral}>neutral</button>\n      <button onClick={handleBad}>bad</button>\n      <h1>statistics</h1>\n      <p>good {good}</p>\n      <p>neutral {neutral}</p>\n      <p>bad {bad}</p>\n      <p>all {all}</p>\n      {/* <HandleAverage /> */}\n      <Statistics good={good} bad={bad} all={all} />\n      <HandlePositive />\n    </div>\n  )\n}\n\nexport default App"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}